datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

enum Roles {
  ROOT
  ADMIN
  MEMBER
  USER
  GUEST
}

enum Category {
  ANIME
  CINEMA
  MOVIE
  UNKNOWN
}

model Account {
  id          String                @id @default(uuid()) @db.Uuid
  uid         String                @unique @db.Text
  email       String                @db.Text
  password    String                @db.Text
  role        Roles                 @default(USER)
  displayName String                @default("diaplay name") @db.Text
  avatar      String                @default("default-avatar.png") @db.Text
  bio         String?               @db.Text
  provider    String                @default("email") @db.Text
  isActive    Boolean               @default(true) @db.Boolean
  isVerified  Boolean               @default(false) @db.Boolean
  createdAt   DateTime              @default(now()) @db.Timestamptz()
  updatedAt   DateTime              @default(now()) @db.Timestamptz()
  permissions PermissionOfAccount[]
  watchList   Watch[]
  favorites   Favorite[]

  @@index(fields: [uid, email])
  @@map("accounts")
}

model Permission {
  id        Int                   @id @default(autoincrement()) @db.Integer
  key       String                @db.Text
  name      String?               @db.Text
  canCreate Boolean               @default(false) @db.Boolean
  canRead   Boolean               @default(true) @db.Boolean
  canEdit   Boolean               @default(false) @db.Boolean
  canDelete Boolean               @default(false) @db.Boolean
  createdAt DateTime              @default(now()) @db.Timestamptz()
  updatedAt DateTime              @default(now()) @db.Timestamptz()
  accounts  PermissionOfAccount[]

  @@index(fields: [key])
  @@map("permissions")
}

model Genre {
  id        Int            @id @default(autoincrement()) @db.Integer
  group     Int            @default(1) @db.Integer
  text      String         @unique @db.Text
  updatedAt DateTime       @default(now()) @db.Timestamptz()
  albums    GenreOfAlbum[]

  @@index(fields: [text])
  @@map("genres")
}

model Album {
  id          String         @id @default(uuid()) @db.Uuid
  name        String         @unique @db.Text
  description String?        @db.Text
  poster      String         @db.Text
  category    Category       @default(ANIME)
  group       String         @default(uuid()) @db.Uuid
  seasonNo    Int            @default(1) @db.Integer
  isActive    Boolean        @default(true) @db.Boolean
  releaseAt   DateTime?      @db.Timestamptz()
  createdAt   DateTime       @default(now()) @db.Timestamptz()
  updatedAt   DateTime       @default(now()) @db.Timestamptz()
  genres      GenreOfAlbum[]
  tracks      Track[]
  favorites   Favorite[]

  @@index(fields: [name])
  @@map("albums")
}

model Track {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @unique @db.Text
  description String?  @db.Text
  poster      String?  @db.Text
  episodeNo   Int      @default(1) @db.Integer
  duration    Float    @default(0) @db.DoublePrecision
  skip        Json?    @db.JsonB
  filePath    String   @db.Text
  fileSize    Float    @db.DoublePrecision
  chunkSize   Float    @default(0) @db.DoublePrecision
  isActive    Boolean  @default(true) @db.Boolean
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @default(now()) @db.Timestamptz()
  albumId     String   @db.Uuid
  albums      Album    @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  watch       Watch[]

  @@index(fields: [title])
  @@map("tracks")
}

model Watch {
  id        String  @id @default(uuid()) @db.Uuid
  seekTime  Float   @default(0) @db.DoublePrecision
  status    String  @default("new") @db.Text
  accountId String  @db.Uuid
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trackId   String  @db.Uuid
  tracks    Track   @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("watch")
}

model Favorite {
  id        Int     @id @default(autoincrement()) @db.Integer
  accountId String  @db.Uuid
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  albumId   String  @db.Uuid
  album     Album   @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("favorites")
}

model PermissionOfAccount {
  id           Int        @id @default(autoincrement()) @db.Integer
  accountId    String     @db.Uuid
  account      Account    @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId Int        @db.Integer
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime   @default(now()) @db.Timestamptz()

  @@map("_permissionOfAccount")
}

model GenreOfAlbum {
  id        Int      @id @default(autoincrement()) @db.Integer
  albumId   String   @db.Uuid
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genreId   Int      @db.Integer
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz()

  @@map("_genreOfAlbum")
}
