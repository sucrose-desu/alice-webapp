datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Account {
  id          String   @id @default(uuid()) @db.Uuid
  uid         String   @unique @db.Text
  email       String   @unique @db.Text
  password    String   @db.Text
  role        String   @default("USER") @db.Text
  displayName String   @default("diaplay name") @db.Text
  avatar      String   @default("default-avatar.png") @db.Text
  bio         String?  @db.Text
  provider    String   @default("EMAIL") @db.Text
  isActive    Boolean  @default(true) @db.Boolean
  isVerified  Boolean  @default(false) @db.Boolean
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  permissions PermissionOfAccount[]
  watchList   Watch[]
  favorites   Favorite[]

  @@index(fields: [uid, email])
  @@map("accounts")
}

model Permission {
  id        Int      @id @default(autoincrement()) @db.Integer
  key       String   @db.Text
  name      String?  @db.Text
  canCreate Boolean  @default(false) @db.Boolean
  canRead   Boolean  @default(true) @db.Boolean
  canEdit   Boolean  @default(false) @db.Boolean
  canDelete Boolean  @default(false) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  accounts PermissionOfAccount[]

  @@index(fields: [key])
  @@map("permissions")
}

model Genre {
  id        Int      @id @default(autoincrement()) @db.Integer
  group     Int      @default(1) @db.Integer
  text      String   @unique @db.Text
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  albums GenreOfAlbum[]

  @@index(fields: [text])
  @@map("genres")
}

model Album {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique @db.Text
  subName     String?   @db.Text
  description String?   @db.Text
  poster      String    @db.Text
  group       String    @default(uuid()) @db.Uuid
  category    String    @default("ANIME") @db.Text
  dubbed      String    @default("JAPAN") @db.Text
  status      String    @default("AIRING") @db.Text
  studio      String?   @db.Text
  source      String?   @default("OTHER") @db.Text
  seasonNo    Int       @default(1) @db.Integer
  link        String?   @db.Text
  isActive    Boolean   @default(true) @db.Boolean
  releaseAt   DateTime? @db.Date
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  genres    GenreOfAlbum[]
  tracks    Track[]
  favorites Favorite[]

  @@index(fields: [name, subName])
  @@map("albums")
}

model Track {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @db.Text
  description String?  @db.Text
  poster      String?  @db.Text
  episodeNo   Int      @default(1) @db.Integer
  duration    Float    @default(0) @db.DoublePrecision
  skip        Json?    @db.JsonB
  filePath    String   @db.Text
  fileType    String   @db.Text
  fileSize    Float    @db.DoublePrecision
  chunkSize   Float    @default(0) @db.DoublePrecision
  isActive    Boolean  @default(true) @db.Boolean
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  albumId String  @db.Uuid
  albums  Album   @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  watch   Watch[]

  @@index(fields: [title, albumId])
  @@map("tracks")
}

model Watch {
  id        String   @id @default(uuid()) @db.Uuid
  seekTime  Float    @default(0) @db.DoublePrecision
  status    String   @default("NEW") @db.Text
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  accountId String  @db.Uuid
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trackId   String  @db.Uuid
  tracks    Track   @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index(fields: [accountId, trackId])
  @@map("watch")
}

// Explicit many-to-many
model Favorite {
  id        Int      @id @default(autoincrement()) @db.Integer
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  accountId String  @db.Uuid
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  albumId   String  @db.Uuid
  album     Album   @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index(fields: [accountId, albumId])
  @@map("favorites")
}

// Explicit many-to-many
model PermissionOfAccount {
  id        Int      @id @default(autoincrement()) @db.Integer
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  accountId    String     @db.Uuid
  account      Account    @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId Int        @db.Integer
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index(fields: [accountId, permissionId])
  @@map("_permissionOfAccount")
}

// Explicit many-to-many
model GenreOfAlbum {
  id        Int      @id @default(autoincrement()) @db.Integer
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  albumId String @db.Uuid
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genreId Int    @db.Integer
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index(fields: [albumId, genreId])
  @@map("_genreOfAlbum")
}
